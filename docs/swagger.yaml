definitions:
  controllers.CreateMedia.response:
    properties:
      message:
        type: string
      success:
        type: boolean
    type: object
  controllers.CreateTag.response:
    properties:
      id:
        type: integer
      message:
        type: string
      success:
        type: boolean
    type: object
  controllers.DeleteTag.response:
    properties:
      message:
        type: string
      success:
        type: boolean
    type: object
  controllers.GetMedias.response:
    properties:
      data:
        items:
          $ref: '#/definitions/models.MediaWithTagNames'
        type: array
      message:
        type: string
      success:
        type: boolean
    type: object
  controllers.GetTags.response:
    properties:
      data:
        items:
          $ref: '#/definitions/models.Tag'
        type: array
      message:
        type: string
      success:
        type: boolean
    type: object
  main.HealthCheck.response:
    properties:
      date:
        type: string
      status:
        type: string
    type: object
  models.MediaWithTagNames:
    properties:
      description:
        type: string
      fileUrl:
        type: string
      id:
        type: integer
      name:
        type: string
      tagNames:
        items:
          type: string
        type: array
    type: object
  models.Tag:
    properties:
      createdAt:
        type: string
      id:
        type: integer
      name:
        type: string
      updatedAt:
        type: string
    type: object
info:
  contact: {}
  title: 'ScorePlay Media API'
  version: '0.1'
paths:
  /api/health:
    get:
      description: Healthcheck endpoint
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.HealthCheck.response'
      summary: Healthcheck endpoint
      tags:
      - Health
  /api/medias:
    get:
      consumes:
      - application/json
      description: Get medias by tag id
      parameters:
      - description: search by tag id
        in: query
        name: tag
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Returns success true and array of medias
          schema:
            $ref: '#/definitions/controllers.GetMedias.response'
        "404":
          description: Returns success true with empty data when no media found
          schema:
            $ref: '#/definitions/controllers.GetMedias.response'
        "500":
          description: Returns error for internal server error
          schema:
            $ref: '#/definitions/controllers.GetMedias.response'
      summary: Get media files by tag id
      tags:
      - Media
    post:
      consumes:
      - multipart/form-data
      description: Upload a new media file to storage and creates a new media entry
        with file url, name and associated tags
      parameters:
      - description: Media file to upload
        in: formData
        name: file
        required: true
        type: file
      - description: Media name
        in: formData
        name: name
        required: true
        type: string
      - description: Array of tag IDs (example => [123, 75, 18873])
        in: formData
        name: tags
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Returns success true when file is uploaded and a new media
            is created
          schema:
            $ref: '#/definitions/controllers.CreateMedia.response'
        "400":
          description: Returns error for missing file or existing media
          schema:
            $ref: '#/definitions/controllers.CreateMedia.response'
        "500":
          description: Returns error for internal server error
          schema:
            $ref: '#/definitions/controllers.CreateMedia.response'
      summary: Upload a new media file
      tags:
      - Media
  /api/tags:
    get:
      consumes:
      - application/json
      description: 'Get tags (optional: by name)'
      parameters:
      - description: search by tag name
        in: query
        name: name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Returns success true and a list of tags found
          schema:
            $ref: '#/definitions/controllers.GetTags.response'
        "500":
          description: Returns error for internal server error
          schema:
            $ref: '#/definitions/controllers.GetTags.response'
      summary: GET tags
      tags:
      - Tag
    post:
      consumes:
      - application/json
      description: Creates a new tag
      parameters:
      - description: tag object to be created
        in: body
        name: tag
        required: true
        schema:
          $ref: '#/definitions/models.Tag'
      produces:
      - application/json
      responses:
        "201":
          description: Returns success true and created tag ID
          schema:
            $ref: '#/definitions/controllers.CreateTag.response'
        "400":
          description: Returns error for invalid input
          schema:
            $ref: '#/definitions/controllers.CreateTag.response'
        "500":
          description: Returns error for internal server error
          schema:
            $ref: '#/definitions/controllers.CreateTag.response'
      summary: Create a new tag
      tags:
      - Tag
  /api/tags/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a tag by its id
      parameters:
      - description: Tag id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Returns success true
          schema:
            $ref: '#/definitions/controllers.DeleteTag.response'
        "500":
          description: Returns error for internal server error
          schema:
            $ref: '#/definitions/controllers.DeleteTag.response'
      summary: Delete a tag
      tags:
      - Tag
swagger: "2.0"
